services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NODE_ENV=development
      - WATCHPACK_POLLING=true
      - CHOKIDAR_USEPOLLING=true
    volumes:
      # Mount source code for hot reload
      - ./frontend/next.config.mjs:/app/next.config.mjs
      - ./frontend/jsconfig.json:/app/jsconfig.json
      - ./frontend/postcss.config.mjs:/app/postcss.config.mjs
      - ./frontend/tailwind.config.js:/app/tailwind.config.js
    networks:
      - papyrus-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - ./backend/.env
    environment:
      - DATABASE_URL=postgresql://papyrus_user:papyrus_password@db:5432/papyrus_db
      - VECTOR_DB_URL=http://vector_db:8000
      - PYTHONPATH=/app:/app/src
    volumes:
      # Mount source code for development
      - ./backend/src:/app/src
      - ./backend/tests:/app/tests
      - ./backend/uploads:/app/uploads  
    networks:
      - papyrus-network

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=papyrus_db
      - POSTGRES_USER=papyrus_user
      - POSTGRES_PASSWORD=papyrus_password
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U papyrus_user -d papyrus_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - papyrus-network

  vector_db:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=TRUE
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=["http://localhost:3000","http://localhost:8001"]

    volumes:
      - chroma_data:/chroma/chroma
    networks:
      - papyrus-network

volumes:
  postgres_data:
  chroma_data:

networks:
  papyrus-network:
    driver: bridge
